"use strict";var i=require("node:fs"),C=require("execa");const F="action.yml",I=".ghaignore",m=".gitignore",k=".backup",R=(e,t)=>{if(!i.existsSync(e))return;let s=e+t;for(;i.existsSync(s);)s=s+t;return i.copyFileSync(e,s),s},q=(e,t)=>t.split(".").reduce((s,n)=>s?.[n],e),b=e=>{const t=new Set;for(const s of e.split(/\r?\n/)){const n=s.split("#")[0].trim();typeof n=="string"&&n!==""&&t.add(n)}return Array.from(t)},v=(e,t="")=>[...t.matchAll(/{(.*?)}/g)].map(s=>s[1]).reduce((s,n)=>{const c=q(e,n);return s.replace(`{${n}}`,`${c}`)},t),E=({branch:e,nextRelease:t})=>({branch:e.name,version:t.version,tag:t.gitTag,notes:t.notes??""}),N=(e,t)=>{const s={ghaIgnores:[],gitIgnores:[]};if(!i.existsSync(e))return s;const n=t??i.readFileSync(e,"utf8");s.ghaIgnores=b(n);const c=R(m,k);if(c!==void 0){s.backupFile=c;const r=i.readFileSync(c,"utf8");s.gitIgnores=b(r),i.rmSync(m,{force:!0})}return i.copyFileSync(e,m),s},O=(e="")=>{i.existsSync(e)&&(i.rmSync(m,{force:!0}),i.copyFileSync(e,m))},a=async(e,t=[])=>await C.execa("git",[e,...t]),j=(e,{force:t=!1}={})=>{const s=[];return t&&s.push("-f"),[...s,"--",e]},A=async(e,t={})=>{const s=j(e,t);return await a("add",s)},G=(e,{allowEmpty:t=!1,keyid:s,sign:n=!1}={})=>{const c=[];if(n){const r="-S",o=typeof s=="string"&&s!==""?`${r}${s}`:r;c.push(o)}return t&&c.push("--allow-empty"),[...c,"-m",`${e}`]},U=async(e,t={})=>{const s=G(e,t);return await a("commit",s)},_=(e,{get:t=!1,list:s=!1,unset:n=!1,scope:c="local",value:r}={})=>{const o=[`--${c}`];return r!=null?o.push(`${e}`,`${r.toString()}`):t?o.push("--get",`${e}`):n?o.push("--unset",`${e}`):s&&o.push("--list"),o},$=async(e,t)=>{const s=_(e,t);return await a("config",s)},B=async(e,t="local")=>{const{stdout:s}=await $(e,{get:!0,scope:t});if(s==="false")return!1;if(s==="true")return!0;const n=Number(s);return Number.isNaN(n)?s:n},M=async(e,t,s="local")=>await $(e,{scope:s,value:t}),P=(e,{tags:t=!1}={})=>{const s=[];let n="";return t===!0&&s.push("--tags"),typeof t=="string"&&(n=t),[...s,e,n]},T=async(e,t={})=>{const s=P(e,t);return await a("ls-remote",s)},W=(e,{delete:t=!1,force:s=!1,remote:n="origin",signed:c=!1}={})=>{const r=[n,e];return t?[n,"-d",e]:(s&&r.push("-f"),c!==!1&&r.push(`--signed=${c}`),r)},H=async(e,t={})=>{const s=W(e,t);return await a("push",s)},K=(e,{quiet:t=!1}={})=>{const s=[];return t&&s.push("-q"),[...s,"--",e]},L=async(e,t={})=>{const s=K(e,t);return await a("reset",s)},X=(e,{cached:t=!1,force:s=!1,ignoreUnmatch:n=!1,quiet:c=!1,recursive:r=!1}={})=>{const o=[];return s&&o.push("-f"),t&&o.push("--cached"),n&&o.push("--ignore-unmatch"),c&&o.push("-q"),r&&o.push("-r"),[...o,"--",e]},Y=async(e,t={})=>{const s=X(e,t);return await a("rm",s)},z=(e,{commit:t,delete:s=!1,force:n=!1,list:c=!1,message:r="",sign:o=!1}={})=>{if(s)return["-d",e];if(c)return e===""?["-l"]:["-l",e];const l=[];return n&&l.push("-f"),o&&l.push("-s"),l.push(e),t!==void 0&&l.push(t),[...l,"-m",`${r}`]},D=async(e,t={})=>{const s=z(e,t);return await a("tag",s)},J=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),Q=(e,t)=>{Object.keys(t).forEach(s=>{const n=J(t[s]);Object.defineProperty(e,s,n)})};Q(a,{add:A,commit:U,config:$,getConfig:B,setConfig:M,lsRemote:T,push:H,reset:L,rm:Y,tag:D});const V=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),Z=(e,t)=>{Object.keys(t).forEach(s=>{const n=V(t[s]);Object.defineProperty(e,s,n)})},f=e=>`\x1B[${e}m`,ee=f(31),se=f(32),te=f(33),ne=f(34),oe=f(37),re=f(90),ce=f(91),g=(e,t,s="\x1B[39m")=>e.split(`
`).map(n=>(n=t+n,n=n.endsWith("\r")?n.slice(0,-1)+s+"\r":n+s,n)).join(`
`),ae=e=>{console.log(g(e,ce))},ie=e=>{console.log(g(e,ee))},le=e=>{console.log(g(e,te))},ue=e=>{console.log(g(e,ne))},fe=e=>{console.log(g(e,se))},ge=e=>{console.log(g(e,re))},me=e=>{console.log(g(e,oe))},pe=e=>{console.log(e)},S=(...e)=>{console.log(...e)};Z(S,{fatal:ae,error:ie,warn:le,info:ue,success:fe,debug:ge,trace:me,log:pe});const he=S,x=async(e,t,{branch:s,message:n,sign:c,tag:r})=>{await a.add("."),console.log("removeContents:",e),console.log("addContents:",t);for(const o of e)console.log("removeContent:",o),t.includes(o)||(console.log("----------removeContent:",o),await a.rm(o,{force:!0,cached:!0,ignoreUnmatch:!0,recursive:o.endsWith("/"),quiet:!0}));for(const o of t)if(console.log("addContent:",o),!e.includes(o)){console.log("----------addContent:",o);try{await a.add(o,{force:!0})}catch(l){const u=l instanceof Error?l.message:`Uknown error from: ${l}`;he.warn(u)}}await a.commit(n,{allowEmpty:!0,sign:c}),await a.push(s),!(typeof r!="string"||r==="")&&(await a.tag(r,{force:!0,message:n,sign:c}),await a.push(r,{force:!0}))},ye=(e,t)=>{if(!i.existsSync(e))return;const s=i.readFileSync(e,"utf8").split(/\r?\n/),n=/^(\s*)version\s*:\s*([^\s#]+)(\s*)(#.*)?$/,c=/^(\s*)name\s*:\s*(.+)$/;let r=!1,o=-1;for(let u=0;u<s.length;u++){const p=s[u].match(n);if(p!=null){const[,h,,y,w]=p;s[u]=`${h}version: ${t}${y!==""?y:" "}${w!==""?w:""}`,r=!0;break}s[u].match(c)!=null&&(o=u)}if(!r){const u=`version: ${t}`;o>=0?s.splice(o+1,0,u):s.unshift(u)}const l=s.join(`
`);i.rmSync(e,{force:!0}),i.writeFileSync(e,l,"utf8")},de=async({actionFile:e=F,ignoreFile:t=I,ignoreContent:s,latestMessage:n=`latest: v{nextRelease.version}

{nextRelease.notes}`,releaseMessage:c=`release: v{nextRelease.version}

{nextRelease.notes}`,sign:r=!1}={},o)=>{const{branch:l,tag:u,version:p}=E(o),{ghaIgnores:d,gitIgnores:h,backupFile:y}=N(t,s);ye(e,p),await x(d,h,{branch:l,message:v(o,c),sign:r,tag:u}),O(y),await x(h,d,{branch:l,message:v(o,n),sign:r})};exports.publish=de;
