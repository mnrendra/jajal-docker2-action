#!/usr/bin/env node
"use strict";var l=require("node:process"),pe=require("semantic-release"),C=require("execa"),$=require("node:fs"),_=require("node:path"),H=require("node:os"),K=require("nanoid"),fe=require("openpgp"),Ge=require("addressparser"),f=require("@actions/core");const de="/github/workspace",L=e=>typeof e=="object"&&e!==null&&!Array.isArray(e)&&"__esModule"in e&&e.__esModule===!0&&"default"in e?e.default:e,d=async(e,r=[])=>await C.execa("git",[e,...r]),we=(e,{force:r=!1}={})=>{const t=[];return r&&t.push("-f"),[...t,"--",e]},ye=async(e,r={})=>{const t=we(e,r);return await d("add",t)},$e=(e,{allowEmpty:r=!1,keyid:t,sign:n=!1}={})=>{const s=[];if(n){const o="-S",a=typeof t=="string"&&t!==""?`${o}${t}`:o;s.push(a)}return r&&s.push("--allow-empty"),[...s,"-m",`${e}`]},Ie=async(e,r={})=>{const t=$e(e,r);return await d("commit",t)},me=(e,{get:r=!1,list:t=!1,unset:n=!1,scope:s="local",value:o}={})=>{const a=[`--${s}`];return o!=null?a.push(`${e}`,`${o.toString()}`):r?a.push("--get",`${e}`):n?a.push("--unset",`${e}`):t&&a.push("--list"),a},N=async(e,r)=>{const t=me(e,r);return await d("config",t)},I=async(e,r="local")=>{const{stdout:t}=await N(e,{get:!0,scope:r});if(t==="false")return!1;if(t==="true")return!0;const n=Number(t);return Number.isNaN(n)?t:n},m=async(e,r,t="local")=>await N(e,{scope:t,value:r}),Ee=(e,{tags:r=!1}={})=>{const t=[];let n="";return r===!0&&t.push("--tags"),typeof r=="string"&&(n=r),[...t,e,n]},he=async(e,r={})=>{const t=Ee(e,r);return await d("ls-remote",t)},Te=(e,{delete:r=!1,force:t=!1,remote:n="origin",signed:s=!1}={})=>{const o=[n,e];return r?[n,"-d",e]:(t&&o.push("-f"),s!==!1&&o.push(`--signed=${s}`),o)},_e=async(e,r={})=>{const t=Te(e,r);return await d("push",t)},ve=(e,{quiet:r=!1}={})=>{const t=[];return r&&t.push("-q"),[...t,"--",e]},Se=async(e,r={})=>{const t=ve(e,r);return await d("reset",t)},Pe=(e,{cached:r=!1,force:t=!1,ignoreUnmatch:n=!1,quiet:s=!1,recursive:o=!1}={})=>{const a=[];return t&&a.push("-f"),r&&a.push("--cached"),n&&a.push("--ignore-unmatch"),s&&a.push("-q"),o&&a.push("-r"),[...a,"--",e]},Re=async(e,r={})=>{const t=Pe(e,r);return await d("rm",t)},Ne=(e,{commit:r,delete:t=!1,force:n=!1,list:s=!1,message:o="",sign:a=!1}={})=>{if(t)return["-d",e];if(s)return e===""?["-l"]:["-l",e];const g=[];return n&&g.push("-f"),a&&g.push("-s"),g.push(e),r!==void 0&&g.push(r),[...g,"-m",`${o}`]},be=async(e,r={})=>{const t=Ne(e,r);return await d("tag",t)},Oe=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),ke=(e,r)=>{Object.keys(r).forEach(t=>{const n=Oe(r[t]);Object.defineProperty(e,t,n)})};ke(d,{add:ye,commit:Ie,config:N,getConfig:I,setConfig:m,lsRemote:he,push:_e,reset:Se,rm:Re,tag:be});const Ue=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),Ae=(e,r)=>{Object.keys(r).forEach(t=>{const n=Ue(r[t]);Object.defineProperty(e,t,n)})},E=e=>`\x1B[${e}m`,Ce=E(31),He=E(32),Ke=E(33),Le=E(34),Me=E(37),Fe=E(90),Be=E(91),h=(e,r,t="\x1B[39m")=>e.split(`
`).map(n=>(n=r+n,n=n.endsWith("\r")?n.slice(0,-1)+t+"\r":n+t,n)).join(`
`),We=e=>{console.log(h(e,Be))},xe=e=>{console.log(h(e,Ce))},b=e=>{console.log(h(e,Ke))},De=e=>{console.log(h(e,Le))},v=e=>{console.log(h(e,He))},S=e=>{console.log(h(e,Fe))},je=e=>{console.log(h(e,Me))},i=e=>{console.log(e)},Ye=(...e)=>{console.log(...e)};Ae(Ye,{fatal:We,error:xe,warn:b,info:De,success:v,debug:S,trace:je,log:i});const qe="gpg-agent.conf",M=".gnupg",Ve={WIN32:"win32"},F=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,B=(e,r=!1)=>e.split(/\n\r|\r\n|\r|\n/).map(t=>r?t.trim():t),O=async(e,r=[],t={})=>{const n=await C.execa(e,r,t),s=B(n.stderr,!0),o=B(n.stdout,!0);return{...n,stderrLines:s,stdoutLines:o}},ze=e=>{try{return $.statSync(e).isDirectory()}catch{return!1}},P=async e=>{const{stdout:r}=await O("gpg-connect-agent",[e,"/bye"]);return r},W=async(e,r)=>{const t=_.join(e,qe);$.writeFileSync(t,r),await P("RELOADAGENT")},T=async(e=[],r={})=>await O("gpg",e,r),Xe=async e=>{const r=["--batch","--yes",e],t=n=>[...r.slice(0,2),n,...r.slice(-1)];await T(t("--delete-secret-keys")),await T(t("--delete-keys"))},Je=async(e=[])=>await O("gpgconf",e),Qe=(e,r)=>e.slice(r.length+1).replace("%3a",":").trim(),k=async()=>{const e=["--list-dirs"],{stdoutLines:r}=await Je(e),t={libdir:"",libexecdir:"",datadir:"",homedir:""};return r.forEach(n=>{Object.keys(t).forEach(s=>{const o=s;n.startsWith(`${o}:`)&&(t[o]=Qe(n,o))})}),Object.keys(t).forEach(n=>{const s=t[n];if(typeof s!="string"||s==="")throw new Error(`Invalid GPG ${n}`,{cause:s})}),t},Ze=async()=>{const{GNUPGHOME:e,HOME:r,USERPROFILE:t}=l.env;if(typeof e=="string"&&e!=="")return e;if(typeof r=="string"&&r!=="")return _.join(r,M);if(typeof t=="string"&&t!==""&&H.platform()===Ve.WIN32)return _.join(t,M);const{homedir:n}=await k();return n},x=async()=>{const e=await Ze();if(e.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:e});return $.existsSync(e)||$.mkdirSync(e,{recursive:!0}),e},D=(e,r)=>{let t="",n=!1;for(const s of e){if(s.startsWith("fpr:")&&s.includes(`:${r}:`)){n=!0;continue}if(s.startsWith("grp:")&&n){t=s.replace(/(grp|:)/g,"").trim();break}}return t},j=async e=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdoutLines:t}=await T(r);return D(t,e)},Y=async e=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdoutLines:t}=await T(r),n=[];return t.forEach(s=>{s.startsWith("grp")&&n.push(s.replace(/(grp|:)/g,"").trim())}),n},U=(e,r)=>e.slice(r.length+1).trim(),q=async()=>{const e=["--version"],{stdoutLines:r}=await T(e),t={gnupg:"",libgcrypt:""};return r.forEach(n=>{n.startsWith("gpg (GnuPG) ")?t.gnupg=U(n,"gpg (GnuPG)"):n.startsWith("gpg (GnuPG/MacGPG2) ")?t.gnupg=U(n,"gpg (GnuPG/MacGPG2)"):n.startsWith("libgcrypt ")&&(t.libgcrypt=U(n,"libgcrypt"))}),Object.keys(t).forEach(n=>{const s=t[n];if(typeof s!="string"||s==="")throw new Error(`Invalid GPG ${n}`,{cause:s})}),t},et=e=>e.trimStart().startsWith("---"),V=e=>et(e)?e:Buffer.from(e,"base64").toString(),tt=async e=>{const r=V(e),t=await fe.readKey({armoredKey:r}),{user:n}=await t.getPrimaryUser(),s=t.getFingerprint().toUpperCase(),o=t.getKeyID().toHex().toUpperCase(),a=L(Ge),{name:g,address:c}=a(n.userID?.userID??"")[0],p=t.getCreationTime();return{digest:s,id:o,name:g,email:c,creationTime:p}},z=async e=>{const r=_.join(H.tmpdir(),`mnrendra-import-gpg-${K.nanoid()}`),t=$.mkdtempSync(r),n=`${t}/${K.nanoid()}.pgp`,s=V(e);$.writeFileSync(n,s,{mode:384});const o=["--import","--batch","--yes",n],{stdout:a,stderr:g}=await T(o);return g!==""?g:($.unlinkSync(n),$.rmSync(t),a)},rt=async()=>{await P("KILLAGENT")},A=async(e,r)=>{const t=Buffer.from(r,"utf8").toString("hex").toUpperCase();return await P(`PRESET_PASSPHRASE ${e} -1 ${t}`),await P(`KEYINFO ${e}`)},X=async(e,r)=>{const t=["--batch","--no-tty","--command-fd","0","--edit-key",e],n=Buffer.from(`trust
${r}
y
quit
`);await T(t,{input:n})};var J={GPG_AGENT_CONF:F,configureAgent:W,deleteKey:Xe,getDirs:k,getHome:x,getKeygrip:j,getKeygrips:Y,getVersion:q,importKey:z,killAgent:rt,parseKeygripFromGpgColonsOutput:D,presetPassphrase:A,setTrust:X};const Q="user.signingkey",Z="user.name",ee="user.email",te="commit.gpgsign",re="tag.gpgsign",ne="push.gpgsign",nt=async(e,r,t,{scope:n,signUser:s,signCommit:o,signTag:a,signPush:g})=>{i("---------------- Configuring Git ---------------------------------");const c={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:!1,userName:"",userEmail:""};return c.scope=n,i(`scope           : ${c.scope}`),s&&(await m(Q,e,n),c.userSigningkey=await I(Q,n),i(`user.signingkey : ${c.userSigningkey}`),await m(Z,r,n),c.userName=await I(Z,n),i(`user.name       : ${c.userName}`),await m(ee,t,n),c.userEmail=await I(ee,n),i(`user.email      : ${c.userEmail}`)),o&&(await m(te,o,n),c.commitGpgsign=await I(te,n),i(`commit.gpgsign  : ${c.commitGpgsign}`)),a&&(await m(re,a,n),c.tagGpgsign=await I(re,n),i(`tag.gpgsign     : ${c.tagGpgsign}`)),g!==!1&&(await m(ne,g,n),c.pushGpgsign=await I(ne,n),i(`push.gpgsign    : ${c.pushGpgsign}`)),c},st=async(e,r,t)=>{const n={gpgHome:"",keygrips:[]};if(t===void 0)return n;const s=await x();if(await W(s,F),n.gpgHome=s,i("---------------- Configuring GnuPG agent -------------------------"),i(`GnuPG home      : ${s}`),r!==void 0){i("---------------- Getting keygrip for fingerprint -----------------");const o=await j(r);i(`Presetting passphrase for key ${r} with keygrip ${o}`);const a=await A(o,t);S(a),n.keygrips=[o]}else{i("---------------- Getting keygrips --------------------------------");const o=await Y(e);for(const a of o){i(`Presetting passphrase for ${a}`);const g=await A(a,t);S(g)}n.keygrips=o}return n},it=async()=>{const e=await q(),r=await k(),t={...e,...r};Object.keys(t).forEach(s=>{const o=t[s];if(typeof o!="string"&&o==="")throw new Error(`Invalid GPG ${s} value`,{cause:o})});const n=`${t.gnupg} (libgcrypt ${t.libgcrypt})`;return i("---------------- GnuPG info --------------------------------------"),i(`Version         : ${n}`),i(`Libdir          : ${t.libdir}`),i(`Libexecdir      : ${t.libexecdir}`),i(`Datadir         : ${t.datadir}`),i(`Homedir         : ${t.homedir}`),{...t,version:n}},ot=async e=>{const{digest:r,id:t,name:n,email:s,creationTime:o}=await tt(e);return i("---------------- GPG private key info ----------------------------"),i(`Fingerprint     : ${r}`),i(`KeyID           : ${t}`),i(`Name            : ${n}`),i(`Email           : ${s}`),i(`CreationTime    : ${o.toUTCString()}`),{digest:r,id:t,name:n,email:s,creationTime:o}},at=async(e,r)=>{i("---------------- Importing GPG private key -----------------------");const t=await z(e);return i(t),t},ct=(e,r)=>{i("---------------- Fingerprint to use ------------------------------"),i(r??e)},R={cwd:l.cwd(),verbose:!1},se=e=>{Object.keys(e).forEach(r=>{R[r]=e[r]})},ie=()=>{const e=l.cwd(),r=R.cwd;e!==r&&(i("---------------- Restore working directory -----------------------"),l.chdir(r),i(`Restore working directory to ${r}.`))},gt=async(e,r)=>{if(r===void 0)return"";const t=Number(r);if(Number.isNaN(t)||t<1||t>5)throw new Error("Invalid GPG Trust Level value",{cause:r});return i("---------------- Setting key's trust level ----------------------"),await X(e,r),i(`Trust level set to ${r} for ${e}`),`Trust level set to ${r} for ${e}`},ut=async e=>{const r=l.cwd();se({...R,cwd:r});const t=_.resolve(e);r!==t&&(i("---------------- Change working directory ------------------------"),l.chdir(t),i(`Using ${t} as working directory...`))},lt=(e=".")=>{if(typeof e!="string"||e==="")throw new Error("Invalid workdir value",{cause:e});if(!ze(e))throw new Error(`workdir ${e} is doesn't exist`,{cause:e});return e},pt=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid passphrase value",{cause:e});return e}},ft=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid fingerprint value",{cause:e});return e}},Gt=e=>{if(e===void 0)return;const r=Number(e);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid trustLevel value",{cause:e});return e},dt=(e="local")=>{if(typeof e!="string"||!["global","local"].includes(e))throw new Error("Invalid gitScope value",{cause:e});return e},wt=(e=!0)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignUser value",{cause:e});return e},yt=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignCommit value",{cause:e});return e},$t=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignTag value",{cause:e});return e},It=(e=!1)=>{if(typeof e!="boolean"&&(typeof e!="string"||e!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:e});return e},mt=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid verbose value",{cause:e});return e},Et=e=>{if(typeof e!="object"||e===null||Array.isArray(e))throw new Error("Invalid options value",{cause:e});const r=lt(e.workdir),t=pt(e.passphrase),n=ft(e.fingerprint),s=Gt(e.trustLevel),o=dt(e.gitScope),a=wt(e.gitSignUser),g=yt(e.gitSignCommit),c=$t(e.gitSignTag),p=It(e.gitSignPush),w=mt(e.verbose);return se({...R,verbose:w}),i("---------------- importGPG's options to use ---------------------"),i(`workdir         : ${r}`),i(`passphrase      : ${t}`),i(`fingerprint     : ${n}`),i(`trustLevel      : ${s}`),i(`gitScope        : ${o}`),i(`gitSignUser     : ${a}`),i(`gitSignCommit   : ${g}`),i(`gitSignTag      : ${c}`),i(`gitSignPush     : ${p}`),i(`verbose         : ${w}`),{workdir:r,passphrase:t,fingerprint:n,trustLevel:s,gitScope:o,gitSignUser:a,gitSignCommit:g,gitSignTag:c,gitSignPush:p,verbose:w}},ht=async(e,r={})=>{try{if(typeof e!="string"||e==="")throw new Error("Invalid GnuPG private key",{cause:e});const t=Et(r),{workdir:n,fingerprint:s,passphrase:o,trustLevel:a}=t;await ut(n);const g=await it(),c=await ot(e),{digest:p,id:w,name:oe,email:ae}=c;ct(p,s);const ce=await at(e),ge=await st(p,s,o);await gt(w,a),v("---------------- Successfully set up GPG key ---------------------");const ue={scope:t.gitScope,signUser:t.gitSignUser,signCommit:t.gitSignCommit,signTag:t.gitSignTag,signPush:t.gitSignPush},y=await nt(w,oe,ae,ue);v("---------------- Successfully configured Git ---------------------");const le={...g,...c,...ge,...y,keyid:w,fingerprint:s??p,log:ce,trustLevel:a,gitConfigScope:y.scope,gitUserSigningkey:y.userSigningkey,gitUserName:y.userName,gitUserEmail:y.userEmail,gitCommitGpgsign:y.commitGpgsign,gitTagGpgsign:y.tagGpgsign,gitPushGpgsign:y.pushGpgsign,workdir:l.cwd()};return ie(),le}catch(t){throw ie(),t instanceof Error?t:new Error("Unknown error",{cause:t})}},Tt=async(e="")=>{if(e.length<=0){S("Primary key fingerprint is not defined. Skipping cleanup.");return}try{i("---------------- Cleaning up GPG key -----------------------------"),i(`Removing key ${e}`),await J.deleteKey(e),i("Killing GnuPG agent"),await J.killAgent(),v("---------------- Successfully cleaned up GPG key -----------------")}catch(r){const t=r instanceof Error?r.message:"Unknown error";b(t),b(`${r}`)}},_t=["alpha","beta","rc"],vt=_t.map(e=>({name:e,prerelease:!0})),St=["+([0-9])?(.{+([0-9]),x}).x","main","next",...vt],Pt="/action",Rt=["docs","style","refactor","perf","test","build","ci","chore","revert"],Nt=Rt.map(e=>({type:e,release:"patch"})),bt=[["@semantic-release/commit-analyzer",{releaseRules:Nt}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],[`${Pt}/@mnrendra/semantic-release-plugin-github-action`,{actionFile:"action.yml",ignoreFile:".ghaignore",releaseMessage:`release: v{nextRelease.version}

{nextRelease.notes}`,latestMessage:`latest: v{nextRelease.version}

{nextRelease.notes}`,sign:!0}],"@semantic-release/github"],Ot={branches:St,plugins:bt,dryRun:!1,ci:!0},G=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:!1,TOKEN:l.env.GITHUB_TOKEN}),u=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),kt=()=>{const e=f.getInput(u.GPG_FINGERPRINT);if(e===void 0||e==="")return G.GPG_FINGERPRINT;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_FINGERPRINT} input`,{cause:e});return e},Ut=()=>{const e=f.getInput(u.GIT_SCOPE);if(e===void 0||e==="")return G.GIT_SCOPE;if(typeof e!="string"||!["global","local"].includes(e))throw new Error(`Invalid ${u.GIT_SCOPE} input`,{cause:e});return e},At=()=>{const e=f.getInput(u.GIT_SIGN_COMMIT);if(e===void 0||e==="")return G.GIT_SIGN_COMMIT;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_COMMIT} input`,{cause:e})}},Ct=()=>{const e=f.getInput(u.GIT_SIGN_PUSH);if(e===void 0||e==="")return G.GIT_SIGN_PUSH;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${u.GIT_SIGN_PUSH} input`,{cause:e})}},Ht=()=>{const e=f.getInput(u.GIT_SIGN_TAG);if(e===void 0||e==="")return G.GIT_SIGN_TAG;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_TAG} input`,{cause:e})}},Kt=()=>{const e=f.getInput(u.GIT_SIGN_USER);if(e===void 0||e==="")return G.GIT_SIGN_USER;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_USER} input`,{cause:e})}},Lt=()=>{const e=f.getInput(u.GPG_PASSPHRASE);if(e===void 0||e==="")return G.GPG_PASSPHRASE;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_PASSPHRASE} input`,{cause:e});return e},Mt=()=>{const e=f.getInput(u.GPG_PRIVATE_KEY);if(e===void 0||e==="")return G.GPG_PRIVATE_KEY;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_PRIVATE_KEY} input`,{cause:e});return e},Ft=()=>{const e=f.getInput(u.TOKEN);if(e===void 0||e==="")return G.TOKEN;if(typeof e!="string")throw new Error(`Invalid ${u.TOKEN} input`,{cause:e});return e},Bt=()=>{const e=f.getInput(u.GPG_TRUST_LEVEL);if(e===void 0||e==="")return G.GPG_TRUST_LEVEL;const r=Number(e);if(Number.isNaN(r)||r<1||r>5)throw new Error(`Invalid ${u.GPG_TRUST_LEVEL} input`,{cause:e});return r},Wt=()=>{const e=f.getInput(u.WORKDIR);if(e===void 0||e==="")return G.WORKDIR;if(typeof e!="string")throw new Error(`Invalid ${u.WORKDIR} input`,{cause:e});return e},xt=()=>{const e=kt(),r=Ut(),t=At(),n=Ct(),s=Ht(),o=Kt(),a=Lt(),g=Mt(),c=Ft(),p=Bt(),w=Wt();return{fingerprint:e,gitScope:r,gitSignCommit:t,gitSignPush:n,gitSignTag:s,gitSignUser:o,passphrase:a,privateKey:g,token:c,trustLevel:p,workdir:w}},Dt=async()=>{await d.setConfig("safe.directory",de,"global");const e=xt();let r="",t="GitOps Release",n="gitops-release@users.noreply.github.com",s=l.cwd();const{privateKey:o,token:a}=e;if(o!==void 0){const p=await ht(o,{...e,verbose:!0});r=p.digest,t=p.name,n=p.email,s=p.workdir}const g=L(pe);console.log("GITHUB_TOKEN:",a?.slice(0,34)),console.log("GITHUB_REPOSITORY:",l.env.GITHUB_REPOSITORY),console.log("GITHUB_REPOSITORY_ID:",l.env.GITHUB_REPOSITORY_ID),console.log("GITHUB_REPOSITORY_OWNER:",l.env.GITHUB_REPOSITORY_OWNER),console.log("GITHUB_REPOSITORY_OWNER_ID:",l.env.GITHUB_REPOSITORY_OWNER_ID),console.log("GITHUB_REF:",l.env.GITHUB_REF),console.log("GITHUB_REF_NAME:",l.env.GITHUB_REF_NAME),console.log("GITHUB_REF_PROTECTED:",l.env.GITHUB_REF_PROTECTED),console.log("GITHUB_REF_TYPE:",l.env.GITHUB_REF_TYPE),console.log("GITHUB_WORKSPACE:",l.env.GITHUB_WORKSPACE),console.log("HOME:",l.env.HOME);const c=await g(Ot,{env:{...l.env,GIT_AUTHOR_NAME:t,GIT_AUTHOR_EMAIL:n,GIT_COMMITTER_NAME:t,GIT_COMMITTER_EMAIL:n,GITHUB_TOKEN:a}});return c!==!1?console.log("release:",c.nextRelease.version):console.warn("failed to release!"),await Tt(r),s};Dt().then(e=>{console.log("hasil:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
